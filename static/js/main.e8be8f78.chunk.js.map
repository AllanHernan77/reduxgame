{"version":3,"sources":["App.js","actions/index.js","reportWebVitals.js","reducers/counter.js","reducers/counterCPU.js","reducers/index.js","index.js"],"names":["App","counter","useSelector","state","counterCPU","dispatch","useDispatch","useState","userChoice","setChoice","userScore","setUserScore","cpuChoice","setCPUChoice","cpuScore","setCPUScore","playGame","console","log","type","functionCPUChoice","randomNumber","Math","floor","random","choice","e","a","className","onClick","target","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","counterReducer","action","counterCPUReducer","allReducers","combineReducers","myStore","createStore","ReactDOM","render","store","document","getElementById"],"mappings":"+OA4FeA,MAtFf,WACE,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCG,EAAaF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,cACxCC,EAAWC,cACjB,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,mBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAkCJ,mBAAS,kBAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAgCN,mBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAsBA,SAASC,IAEP,OADAC,QAAQC,IAAIV,GACJA,EAAaI,GACnB,IAAK,UACL,IAAK,YACL,IAAK,WAxBPD,EAAaD,EAAU,GACvBL,EChBM,CACFc,KAAM,kBDgBM,GAAbT,GACDO,QAAQC,IAAI,OAuBR,MACJ,IAAK,YACL,IAAK,WACL,IAAK,UArBPH,EAAYD,EAAS,GACrBT,EClBM,CACFc,KAAM,iBDkBK,GAAZL,GACDG,QAAQC,IAAI,QA8BhB,SAASE,IACP,IACMC,EAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,UACrCX,EAFgB,CAAC,OAAQ,QAAS,OAEbQ,IACrBL,IAGF,IAAMS,EAAM,uCAAI,WAAOC,GAAP,SAAAC,EAAA,sEACNlB,EAAUiB,GADJ,OAEZN,IAFY,2CAAJ,sDAOZ,OAEF,gCACM,sBAAKQ,UAAU,UAAf,UACE,sBAAKA,UAAU,YAAf,0BAAyC3B,EAAzC,OACA,mDAAsBW,KACtB,sBAAKgB,UAAU,YAAf,wBAAuCxB,QAG3C,qBAAKwB,UAAU,MAAf,SACI,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,aAAf,cAA8B,wBAAQC,QAAW,SAAAH,GAAC,OAAID,EAAOC,EAAEI,OAAOC,KAAMA,GAAI,OAAlD,qBAC9B,qBAAKH,UAAU,aAAf,SAA4B,wBAAQC,QAAY,SAAAH,GAAC,OAAID,EAAOC,EAAEI,OAAOC,KAAKA,GAAK,QAAnD,qBAC5B,qBAAKH,UAAU,aAAf,SAA4B,wBAAQC,QAAW,SAAAH,GAAC,OAAID,EAAOC,EAAEI,OAAOC,KAAKA,GAAK,MAAlD,iCExEvBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCICQ,EATQ,WAAuB,IAAtBtC,EAAqB,uDAAd,EAAGuC,EAAW,uCACzC,MACS,kBADFA,EAAOvB,KAEKhB,EAAO,EAEXA,GCIJwC,EATW,WAAuB,IAAtBxC,EAAqB,uDAAd,EAAGuC,EAAW,uCAC5C,MACS,iBADFA,EAAOvB,KAEKhB,EAAO,EAEXA,GCGJyC,EANKC,YAAgB,CAChC5C,QAASwC,EACTrC,WAAauC,ICIXG,EAAUC,YAAYH,GAE5BI,IAASC,OAEP,cAAC,IAAD,CAAUC,MAAQJ,EAAlB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.e8be8f78.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {useSelector,useDispatch} from 'react-redux'\nimport './App.css';\nimport {increment} from './actions'\nimport {incrementCPU} from './actions'\n\nfunction App() {\n  const counter = useSelector(state => state.counter)\n  const counterCPU = useSelector(state => state.counterCPU)\n  const dispatch = useDispatch();\n  const [userChoice, setChoice] = useState(\"\");\n  const [userScore, setUserScore] = useState(0); \n  const [cpuChoice, setCPUChoice] = useState(\"Nothing Yet...\");\n  const [cpuScore, setCPUScore] = useState(0); \n\n  function win(){\n    setUserScore(userScore+1)\n    dispatch(increment())\n    if(userScore == 3){\n      console.log(\"win\")\n    }\n  }\n  \n  function lose(){\n    setCPUScore(cpuScore+1)\n    dispatch(incrementCPU())\n    if(cpuScore == 3){\n      console.log(\"win\")\n    }\n  }\n\n  function draw(){\n\n  }\n\n  function playGame(){\n    console.log(userChoice )\n    switch (userChoice + cpuChoice) {\n      case \"rocksci\":\n      case \"paperrock\":\n      case \"scipaper\":\n          win();\n          break;\n      case \"rockpaper\":\n      case \"papersci\":\n      case \"scirock\":\n          lose();\n          break;\n      case \"rockrock\":\n      case \"paperpaper\":\n      case \"scisci\":\n          draw();\n          break;\n  }\n  }\n\n\n  function functionCPUChoice () {\n    const choices = ['rock', 'paper', 'sci'];\n    const randomNumber = Math.floor(Math.random() * 3);\n    setCPUChoice(choices[randomNumber])\n    playGame()\n  }\n\n  const choice  = async (e) =>{\n      await setChoice(e)\n      functionCPUChoice()\n  } \n\n  \n  \n  return (\n\n<div>\n      <div className='choices'>\n        <div className='scoreGrid'>Human Score: {counter} </div>\n        <div> The CPU Chose: {cpuChoice}</div>\n        <div className='scoreGrid'>CPU Score: {counterCPU}</div>\n      </div>\n\n    <div className=\"App\">\n        <div className='choices'>\n          <div className='choiceGrid' > <button onClick = {e => choice(e.target.id) } id =\"rock\">Rock</button></div>\n          <div className='choiceGrid'><button onClick = { e => choice(e.target.id)} id = \"paper\">Paper</button></div>\n          <div className='choiceGrid'><button onClick = {e => choice(e.target.id)} id = \"sci\">Scissors</button></div>  \n        </div>  \n    </div>\n\n</div>\n  );\n}\n\nexport default App;\n","export const increment = () => {\r\n    return{\r\n        type: 'INCREMENTUSER',\r\n    }\r\n}\r\n\r\nexport const incrementCPU = () =>{\r\n    return{\r\n        type: 'INCREMENTCPU'\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\n\r\nconst counterReducer = (state =0, action) => {\r\n    switch(action.type){\r\n        case 'INCREMENTUSER' :\r\n                return state +1\r\n        default:\r\n            return state \r\n    }\r\n}\r\n\r\nexport default counterReducer","\r\n\r\nconst counterCPUReducer = (state =0, action) => {\r\n    switch(action.type){\r\n        case 'INCREMENTCPU' :\r\n                return state +1\r\n        default:\r\n            return state \r\n    }\r\n}\r\n\r\nexport default counterCPUReducer","import counterReducer from './counter'\r\nimport counterCPUReducer from './counterCPU.js'\r\nimport {combineReducers} from 'redux'\r\n\r\nconst allReducers = combineReducers({\r\n    counter: counterReducer,\r\n    counterCPU : counterCPUReducer\r\n})\r\n\r\n\r\nexport default allReducers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {createStore, combineReducers} from 'redux'\nimport allReducers from './reducers'\nimport {Provider} from 'react-redux'\n\n\nconst myStore = createStore(allReducers)\n\nReactDOM.render(\n  \n  <Provider store ={myStore}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}